{"version":3,"file":"static/js/local-app.04abcf84.chunk.js","mappings":"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","sources":["JsExtensionsLoader/LocalJsExtensionsFinder.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","ResourcesList/LocalEmbeddedResourceSources.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","Utils/LocalUserInfo.js","Export/LocalExporters/LocalFileSystem.js","qr-creator.js","UI/QrCode.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","UI/LocalFilePicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","Export/LocalExporters/LocalFileUploader.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","Export/LocalExporters/index.js","MainFrame/ElectronMainMenu.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectResourcesHandler.js","ProjectsStorage/LocalFileStorageProvider/index.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","Utils/ProcessByChunk.js","Utils/LocalFileUploader.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","LocalApp.js"],"sourcesContent":["// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport newNameGenerator from '../Utils/NewNameGenerator';\nimport { isPathInProjectFolder } from './ResourceUtils';\nimport { createNewResource } from './ResourceSource';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport type EmbeddedResource = {|\n  resourceKind: string,\n  resourceName?: string,\n\n  /** The \"path\" to the embedded resource (e.g: a tileset) as stored in the parent resource (e.g: a tilemap). */\n  relPath: string,\n\n  /** The full path to the file of the embedded resource. */\n  fullPath: string,\n\n  /** True if the embedded resource file is outside the project folder. */\n  isOutsideProjectFolder: boolean,\n|};\n\nexport type EmbeddedResources = {|\n  hasAnyEmbeddedResourceOutsideProjectFolder: boolean,\n  embeddedResources: Map<string, EmbeddedResource>,\n|};\n\nexport type MappedResources = {|\n  mapping: { [key: string]: string },\n|};\n\ntype ParseEmbeddedFiles = (\n  project: gdProject,\n  filePath: string\n) => Promise<?EmbeddedResources>;\n\n/**\n * Copy the embedded resources inside the project folder\n */\nexport async function copyAllEmbeddedResourcesToProjectFolder(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n) {\n  if (!fs || !path) {\n    return;\n  }\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const copies = [];\n\n  for (const {\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n    embeddedResources,\n  } of filesWithEmbeddedResources.values()) {\n    if (!hasAnyEmbeddedResourceOutsideProjectFolder) continue;\n\n    for (const embedded of embeddedResources.values()) {\n      if (!embedded.isOutsideProjectFolder) continue;\n\n      const resourceBasename = path.basename(embedded.fullPath);\n      const fileExtension = path.extname(resourceBasename);\n      const fileNameWithoutExtension = path.basename(\n        resourceBasename,\n        fileExtension\n      );\n\n      const newFileNameWithoutExtension = newNameGenerator(\n        fileNameWithoutExtension,\n        tentativeFileName => {\n          const tentativePath =\n            path.join(projectPath, tentativeFileName) + fileExtension;\n          return fs.existsSync(tentativePath);\n        }\n      );\n\n      const resourceNewPath = path.join(\n        projectPath,\n        newFileNameWithoutExtension + fileExtension\n      );\n\n      embedded.resourceName = newFileNameWithoutExtension + fileExtension;\n\n      copies.push(fs.promises.copyFile(embedded.fullPath, resourceNewPath));\n    }\n  }\n\n  return Promise.all(copies);\n}\n\n/**\n * Create the mapping between embedded resource path (e.g: path to a tileset) to its resource name (i.e: the name of\n * the resource containing the tileset).\n */\nexport function createAndMapEmbeddedResources(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n): Map<string, MappedResources> {\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const filesWithMappedResources = new Map<string, MappedResources>();\n  for (const [filePath, { embeddedResources }] of filesWithEmbeddedResources) {\n    const mapping = {};\n    for (let {\n      resourceKind,\n      resourceName,\n      relPath,\n      fullPath,\n    } of embeddedResources.values()) {\n      if (!resourceName) {\n        resourceName = path.relative(projectPath, fullPath);\n      }\n\n      const theEmbeddedResource = createNewResource(resourceKind);\n      if (theEmbeddedResource) {\n        theEmbeddedResource.setName(resourceName);\n        theEmbeddedResource.setFile(resourceName);\n\n        mapping[relPath] = resourceName;\n\n        project.getResourcesManager().addResource(theEmbeddedResource);\n      }\n    }\n\n    filesWithMappedResources.set(filePath, {\n      mapping,\n    });\n  }\n\n  return filesWithMappedResources;\n}\n\n/**\n * List the embedded resources of a Tilemap (or JSON) resource.\n * Supports LDtk tilemaps.\n *\n * @param project The project\n * @param filePath The file path of a resource\n * @returns\n */\nexport async function listTileMapEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) {\n    return null;\n  }\n\n  const data = await fs.promises.readFile(filePath, 'utf8');\n  try {\n    const tileMap = JSON.parse(data);\n\n    // For LDtk tilemaps, read the tilesets.\n    if (tileMap && tileMap.__header__ && tileMap.__header__.app === 'LDtk') {\n      const dir = path.dirname(filePath);\n      const embeddedResources = new Map<string, EmbeddedResource>();\n      let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n      for (const tileset of tileMap.defs.tilesets) {\n        if (tileset.relPath) {\n          const relPath = tileset.relPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(relPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      for (const level of tileMap.levels) {\n        if (level.bgRelPath) {\n          const relPath = level.bgRelPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(level.bgRelPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      return {\n        hasAnyEmbeddedResourceOutsideProjectFolder,\n        embeddedResources,\n      };\n    }\n  } catch (error) {\n    console.error(\n      `Unable to read properly the data from file ${filePath} for use as a tilemap - ignoring any potentially embedded resources.`\n    );\n    return null;\n  }\n}\n\nexport const embeddedResourcesParsers: { [string]: ParseEmbeddedFiles } = {\n  tilemap: listTileMapEmbeddedResources,\n  json: listTileMapEmbeddedResources,\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ChooseResourceProps,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nimport {\n  copyAllEmbeddedResourcesToProjectFolder,\n  embeddedResourcesParsers,\n  createAndMapEmbeddedResources,\n  type EmbeddedResources,\n  type MappedResources,\n} from './LocalEmbeddedResourceSources';\nimport { Line } from '../UI/Grid';\nimport RaisedButton from '../UI/RaisedButton';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nconst localResourceSources: Array<ResourceSource> = [\n  // Have the local resource sources first, so they are used by default/shown first when\n  // the project is saved locally.\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => {\n      const selectLocalFileResources = async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }: ChooseResourceProps) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        let hasFilesOutsideProjectFolder = filePaths.some(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        // Some resources, like tilemaps, can have references to other files.\n        // We parse these files, optionally copy them, then create a mapping from the previous file name\n        // as written inside the tilemap to the name of the resource that is representing this file.\n        const filesWithEmbeddedResources = new Map<string, EmbeddedResources>();\n        const parseEmbeddedResources = embeddedResourcesParsers[kind];\n        if (parseEmbeddedResources) {\n          for (const filePath of filePaths) {\n            const embeddedResources = await parseEmbeddedResources(\n              project,\n              filePath\n            );\n\n            if (embeddedResources) {\n              filesWithEmbeddedResources.set(filePath, embeddedResources);\n\n              if (embeddedResources.hasAnyEmbeddedResourceOutsideProjectFolder)\n                hasFilesOutsideProjectFolder = true;\n            }\n          }\n        }\n\n        // Check if files should be copied in the project folder.\n        const newToOldFilePaths = new Map<string, string>();\n        let filesWithMappedResources = new Map<string, MappedResources>();\n        if (hasFilesOutsideProjectFolder) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(\n              project,\n              filePaths,\n              newToOldFilePaths\n            );\n\n            await copyAllEmbeddedResourcesToProjectFolder(\n              project,\n              filesWithEmbeddedResources\n            );\n          }\n        }\n\n        // In case of resources embedded inside others,\n        // create a mapping from the file name\n        // as written inside the resource (e.g: the tilemap)\n        // to the name of the resource that was created to\n        // represent this file.\n        filesWithMappedResources = createAndMapEmbeddedResources(\n          project,\n          filesWithEmbeddedResources\n        );\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          const filePathWithMapping = newToOldFilePaths.has(filePath)\n            ? newToOldFilePaths.get(filePath)\n            : filePath;\n          if (filePathWithMapping) {\n            const mappedResources = filesWithMappedResources.get(\n              filePathWithMapping\n            );\n\n            if (mappedResources && mappedResources.mapping) {\n              newResource.setMetadata(\n                JSON.stringify({\n                  embeddedResourcesMapping: mappedResources.mapping,\n                })\n              );\n            }\n          }\n\n          return newResource;\n        });\n      };\n\n      return {\n        name: 'local-file-opener-' + kind,\n        displayName: t`Choose a file`,\n        displayTab: 'import',\n        onlyForStorageProvider: 'LocalFile',\n        kind,\n        selectResourcesHeadless: selectLocalFileResources,\n        renderComponent: (props: ResourceSourceComponentProps) => (\n          <Line justifyContent=\"center\">\n            <RaisedButton\n              primary\n              label={\n                props.options.multiSelection ? (\n                  <Trans>Choose one or more files</Trans>\n                ) : (\n                  <Trans>Choose a file</Trans>\n                )\n              }\n              onClick={async () => {\n                const resources = await selectLocalFileResources({\n                  i18n: props.i18n,\n                  project: props.project,\n                  fileMetadata: props.fileMetadata,\n                  getStorageProvider: props.getStorageProvider,\n                  getLastUsedPath: props.getLastUsedPath,\n                  setLastUsedPath: props.setLastUsedPath,\n                  options: props.options,\n                });\n\n                props.onChooseResources(resources);\n              }}\n            />\n          </Line>\n        ),\n      };\n    }\n  ),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    onlyForStorageProvider: 'Cloud',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n        automaticallyOpenInput={!!props.automaticallyOpenIfPossible}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default localResourceSources;\n","// @flow\nimport {\n  type ResourceExternalEditor,\n  type ExternalEditorInput,\n  type ExternalEditorOutput,\n  type ExternalEditorBase64Resource,\n  type EditWithExternalEditorOptions,\n  readMetadata,\n  saveBlobUrlsFromExternalEditorBase64Resources,\n  freeBlobsAndUpdateMetadata,\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary,\n} from './ResourceExternalEditor';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\nimport { t } from '@lingui/macro';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { isBlobURL, isURL } from './ResourceUtils';\nimport {\n  convertBlobToDataURL,\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../Utils/BlobDownloader';\nimport { type ResourceKind } from './ResourceSource';\n\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Ask Electron main process to open a window for the specified editor,\n * then wait for the editor to be closed and pass the results.\n */\nconst openAndWaitForExternalEditorWindow = async (\n  editorName: 'piskel' | 'yarn' | 'jfxr',\n  externalEditorInput: ExternalEditorInput\n): Promise<?ExternalEditorOutput> => {\n  if (!ipcRenderer) throw new Error('Not supported.');\n\n  const externalEditorOutput = await ipcRenderer.invoke(\n    `${editorName}-load`,\n    externalEditorInput\n  );\n  return externalEditorOutput;\n};\n\n/**\n * Download (or read locally) resources and prepare them to be edited\n * by an external editor.\n */\nexport const downloadAndPrepareExternalEditorBase64Resources = async ({\n  project,\n  resourceNames,\n}: {|\n  project: gdProject,\n  resourceNames: Array<string>,\n|}): Promise<Array<ExternalEditorBase64Resource>> => {\n  type ResourceToDownload = {|\n    resourceName: string,\n    url: string,\n  |};\n\n  type ResourceToReadLocally = {|\n    resourceName: string,\n    localFilePath: string,\n  |};\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const urlsToDownload: Array<ResourceToDownload> = [];\n  const filesToRead: Array<ResourceToReadLocally> = [];\n  const resourcesManager = project.getResourcesManager();\n  resourceNames.forEach(resourceName => {\n    if (!resourcesManager.hasResource(resourceName)) return;\n\n    const resource = resourcesManager.getResource(resourceName);\n    const url = resource.getFile();\n    if (isURL(url)) {\n      if (isBlobURL(url)) {\n        console.error('Unsupported blob URL for a resource - ignoring it.');\n      } else {\n        urlsToDownload.push({\n          url,\n          resourceName,\n        });\n      }\n    } else {\n      // This resource is a local file.\n      filesToRead.push({\n        localFilePath: url,\n        resourceName,\n      });\n    }\n  });\n\n  const downloadedBlobs: Array<\n    ItemResult<ResourceToDownload>\n  > = await downloadUrlsToBlobs({\n    urlContainers: urlsToDownload,\n    onProgress: (count, total) => {},\n  });\n\n  const resourcesToDataUrl = new Map<\n    string,\n    {|\n      dataUrl: string,\n      localFilePath?: string,\n    |}\n  >();\n  await Promise.all(\n    downloadedBlobs.map(async ({ error, blob, item }) => {\n      if (blob) {\n        try {\n          resourcesToDataUrl.set(item.resourceName, {\n            dataUrl: await convertBlobToDataURL(blob),\n          });\n        } catch (error) {\n          console.error(\n            `Unable to read data from resource \"${\n              item.resourceName\n            }\" - ignoring it.`,\n            error\n          );\n        }\n      }\n    })\n  );\n  await Promise.all(\n    filesToRead.map(async ({ localFilePath, resourceName }) => {\n      try {\n        const content = await fs.promises.readFile(\n          path.resolve(projectPath, localFilePath)\n        );\n\n        resourcesToDataUrl.set(resourceName, {\n          localFilePath,\n          dataUrl: 'data:text/plain;base64,' + content.toString('base64'),\n        });\n      } catch (error) {\n        console.error(\n          `Unable to read local file \"${localFilePath}\" - ignoring it.`,\n          error\n        );\n      }\n    })\n  );\n\n  return resourceNames.map(resourceName => {\n    const resourceData = resourcesToDataUrl.get(resourceName);\n    if (!resourceData)\n      return {\n        name: resourceName,\n        dataUrl: '',\n      };\n\n    const { localFilePath, dataUrl } = resourceData;\n    return {\n      name: resourceName,\n      dataUrl,\n      localFilePath,\n    };\n  });\n};\n\n/**\n * Edit one or more resources with the specified external editor.\n */\nconst editWithLocalExternalEditor = async ({\n  externalEditorName,\n  defaultName,\n  metadataKey,\n  resourceKind,\n  options,\n}: {|\n  externalEditorName: 'piskel' | 'yarn' | 'jfxr',\n  defaultName: string,\n  metadataKey: string,\n  resourceKind: ResourceKind,\n  options: EditWithExternalEditorOptions,\n|}) => {\n  const { project, resourceNames, resourceManagementProps } = options;\n\n  // Fetch all edited resources as base64 encoded \"data urls\" (`data:...`).\n  const resources = await downloadAndPrepareExternalEditorBase64Resources({\n    project,\n    resourceNames,\n  });\n\n  // Open the external editor, passing the resources with the data urls.\n  const externalEditorInput: ExternalEditorInput = {\n    singleFrame: options.extraOptions.singleFrame,\n    externalEditorData: readMetadata(\n      metadataKey,\n      options.extraOptions.existingMetadata\n    ),\n    fps: options.extraOptions.fps,\n    isLooping: options.extraOptions.isLooping,\n    name: options.extraOptions.name || resourceNames[0] || defaultName,\n    resources,\n  };\n  sendExternalEditorOpened(externalEditorName);\n  const externalEditorOutput: ?ExternalEditorOutput = await openAndWaitForExternalEditorWindow(\n    externalEditorName,\n    externalEditorInput\n  );\n  if (!externalEditorOutput) return null; // Changes cancelled.\n\n  // Save the edited files back to the SpeXEngine resources, as \"blob urls\" (blob:...)\n  // which can then uploaded or saved locally.\n  const modifiedResources = await saveBlobUrlsFromExternalEditorBase64Resources(\n    {\n      baseNameForNewResources: externalEditorOutput.baseNameForNewResources,\n      project,\n      resources: externalEditorOutput.resources,\n      resourceKind,\n    }\n  );\n\n  // Ask the project to persist the resources (\"blob urls\" will be either uploaded\n  // or saved locally).\n  try {\n    await resourceManagementProps.onFetchNewlyAddedResources();\n  } catch (error) {\n    console.error(\n      'An error happened while fetching the newly added resources:',\n      error\n    );\n  }\n\n  // Free the \"blob urls\" so that blobs don't stay in memory! They are only temporarily\n  // useful while waiting for an upload/local file save.\n  freeBlobsAndUpdateMetadata({\n    modifiedResources,\n    metadataKey,\n    metadata: options.extraOptions.singleFrame\n      ? externalEditorOutput.externalEditorData\n      : null,\n  });\n\n  // Some editors (Piskel) need to have resource names persisted.\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary(\n    modifiedResources.map(({ resource }) => resource.getName()),\n    externalEditorOutput.externalEditorData\n  );\n\n  return {\n    resources: modifiedResources.map(({ resource, originalIndex }) => ({\n      name: resource.getName(),\n      originalIndex,\n    })),\n    newName: externalEditorOutput.baseNameForNewResources,\n    newMetadata: { [metadataKey]: externalEditorOutput.externalEditorData },\n  };\n};\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    createDisplayName: t`Create with Piskel`,\n    editDisplayName: t`Edit with Piskel`,\n    kind: 'image',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'piskel',\n        defaultName: 'New image',\n        metadataKey: 'pskl',\n        resourceKind: 'image',\n      });\n    },\n  },\n  {\n    name: 'Jfxr',\n    createDisplayName: t`Create with Jfxr`,\n    editDisplayName: t`Edit with Jfxr`,\n    kind: 'audio',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'jfxr',\n        defaultName: 'New sound effect',\n        metadataKey: 'jfxr',\n        resourceKind: 'audio',\n      });\n    },\n  },\n  {\n    name: 'Yarn',\n    createDisplayName: t`Create with Yarn`,\n    editDisplayName: t`Edit with Yarn`,\n    kind: 'json',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'yarn',\n        defaultName: 'New dialogue tree',\n        metadataKey: 'yarn',\n        resourceKind: 'json',\n      });\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport { isURL } from '../../ResourcesList/ResourceUtils';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\n\nconst gd: libGDevelop = global.gd;\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nclass LocalFileSystem {\n  /**\n   * True if URLs should be downloaded (useful for an export, but not for a preview).\n   * @private\n   */\n  _downloadUrlsToLocalFiles: boolean;\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  constructor(\n    options: ?{|\n      downloadUrlsToLocalFiles: boolean,\n    |}\n  ) {\n    this._downloadUrlsToLocalFiles =\n      !!options && options.downloadUrlsToLocalFiles;\n  }\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified destination path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    // Ensure the path prefix we're searching the files in is normalized,\n    // because everything that we stored was normalized. If we don't do this,\n    // we risk missing files on Windows (as pathPrefix can contain backslashes).\n    const normalizedPathPrefix = pathPosix\n      .normalize(pathPrefix)\n      .replace(/\\\\/g, '/');\n\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(normalizedPathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return;\n    }\n\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  dirExists = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return true;\n    }\n\n    return fs.existsSync(path);\n  };\n  clearDir = (path: string) => {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  };\n  getTempDir = () => {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  };\n  fileNameFrom = (fullPath: string) => {\n    // If URLs are not downloaded, then filenames are not changed.\n    if (!this._downloadUrlsToLocalFiles && isURL(fullPath)) return fullPath;\n\n    return path.basename(fullPath);\n  };\n  dirNameFrom = (fullPath: string) => {\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  isAbsolute = (fullPath: string) => {\n    if (isURL(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    if (isURL(source)) {\n      // If URLs are not downloaded, then there is nothing to copy.\n      if (!this._downloadUrlsToLocalFiles) return true;\n\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  writeToFile = (file: string, contents: string) => {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  readFile = (file: string) => {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  };\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  };\n  fileExists = (filePath: string) => {\n    // Check if a file WILL exists once downloaded.\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    const shouldTheFileBeDownloaded = !!this._filesToDownload[\n      normalizedFilePath\n    ];\n    if (shouldTheFileBeDownloaded) {\n      return true;\n    }\n\n    // Check if a local file exists.\n    try {\n      const stat = fs.statSync(filePath);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n}\n\nexport default LocalFileSystem;\n",null,"// @flow\n\nimport * as React from 'react';\nimport QrCreator from 'qr-creator';\nimport GDevelopThemeContext from './Theme/GDevelopThemeContext';\n\ntype Props = {|\n  url: string,\n  size?: number,\n|};\n\nconst QrCode = ({ url, size = 128 }: Props) => {\n  const gdevelopTheme = React.useContext(GDevelopThemeContext);\n\n  const containerRef = React.useRef<?HTMLDivElement>(null);\n  React.useEffect(\n    () => {\n      const containerElement = containerRef.current;\n\n      if (!containerElement) return;\n\n      QrCreator.render(\n        {\n          text: url,\n          radius: 0,\n          // See https://www.qrcode.com/en/about/error_correction.html.\n          // The lower the level, the smaller the image. We don't need high level\n          // because it won't be damaged.\n          ecLevel: 'L',\n          fill: gdevelopTheme.palette.secondary,\n          background: null, // color or null for transparent\n          size, // in pixels\n        },\n        containerElement\n      );\n      return () => {\n        if (containerElement.firstChild) {\n          containerElement.removeChild(containerElement.firstChild);\n        }\n      };\n    },\n    [url, size, gdevelopTheme]\n  );\n  return <div ref={containerRef} />;\n};\n\nexport default QrCode;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\nimport ShareLink from '../../../UI/ShareDialog/ShareLink';\nimport QrCode from '../../../UI/QrCode';\n\ntype Props = {|\n  open: boolean,\n  /**\n   * url without protocol, for example '192.168.1.16:2929'\n   */\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nconst LocalNetworkPreviewDialog = ({\n  url,\n  open,\n  error,\n  onExport,\n  onClose,\n  onRunPreviewLocally,\n}: Props) => {\n  if (!open) return null;\n  const urlWithProtocol = url ? `http://${url}` : '';\n\n  return (\n    <Dialog\n      title={<Trans>Preview</Trans>}\n      actions={[\n        <FlatButton\n          key=\"close\"\n          label={<Trans>Close</Trans>}\n          primary\n          onClick={onClose}\n        />,\n      ]}\n      secondaryActions={[\n        onExport && (\n          <FlatButton\n            key=\"export\"\n            label={<Trans>Export game</Trans>}\n            onClick={onExport}\n          />\n        ),\n        <FlatButton\n          key=\"run-preview-locally\"\n          label={<Trans>Run on this computer</Trans>}\n          onClick={onRunPreviewLocally}\n        />,\n      ]}\n      open={open}\n      onRequestClose={onClose}\n      maxWidth=\"sm\"\n    >\n      {error && (\n        <Line>\n          <Text>\n            <Trans>\n              Unable to start the server for the preview! Make sure that you are\n              authorized to run servers on this computer. Otherwise, use classic\n              preview to test your game.\n            </Trans>\n          </Text>\n        </Line>\n      )}\n      {!error && !url && <PlaceholderLoader />}\n      {!error && url && (\n        <div>\n          <Line>\n            <Text>\n              <Trans>\n                Your preview is ready! On your mobile or tablet, open your\n                browser and enter in the address bar:\n              </Trans>\n            </Text>\n          </Line>\n          <ShareLink url={url} />\n          {urlWithProtocol && (\n            <>\n              <Line>\n                <Text>\n                  <Trans>Or flash this QR code:</Trans>\n                </Text>\n              </Line>\n              <Line justifyContent=\"center\">\n                <QrCode url={urlWithProtocol} size={100} />\n              </Line>\n            </>\n          )}\n          <Line>\n            <Text>\n              <Trans>\n                Please note that your device should be connected on the same\n                network as this computer.\n              </Trans>\n            </Text>\n          </Line>\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default LocalNetworkPreviewDialog;\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-connection-errored');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on(\n        'debugger-connection-errored',\n        (event, { id, errorMessage }) => {\n          callbacksList.forEach(({ onConnectionErrored }) =>\n            onConnectionErrored({\n              id,\n              errorMessage,\n            })\n          );\n        }\n      );\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport LocalFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker, {\n  type SubscriptionCheckerInterface,\n} from '../../../Profile/Subscription/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  closePreview = (windowId: number) => {\n    if (!ipcRenderer) return;\n    ipcRenderer.invoke('preview-close', { windowId });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: false,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            if (previewOptions.fallbackAuthor) {\n              previewExportOptions.setFallbackAuthor(\n                previewOptions.fallbackAuthor.id,\n                previewOptions.fallbackAuthor.username\n              );\n            }\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkUserHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkUserHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() =>\n            this.setState({ networkPreviewDialogOpen: false })\n          }\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport * as React from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport FlatButton from '../FlatButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nconst LocalFilePicker = ({\n  value,\n  onChange,\n  title,\n  message,\n  defaultPath,\n  fullWidth,\n  filters,\n}: Props) => {\n  const onChooseFolder = async () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    const { filePath } = await dialog.showSaveDialog(browserWindow, {\n      title: title,\n      filters: filters,\n      message: message,\n      defaultPath: defaultPath,\n    });\n    onChange(filePath || '');\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.container,\n        width: fullWidth ? '100%' : undefined,\n      }}\n    >\n      <TextField\n        margin=\"dense\"\n        style={styles.textField}\n        type=\"text\"\n        translatableHintText={t`Choose a file`}\n        value={value}\n        onChange={(event, value) => onChange(value)}\n      />\n      <FlatButton\n        label={<Trans>Choose</Trans>}\n        style={styles.button}\n        onClick={onChooseFolder}\n      />\n    </div>\n  );\n};\n\nexport default LocalFilePicker;\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('facebookInstantGames');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Create package for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport {\n  buildMainMenuDeclarativeTemplate,\n  type BuildMainMenuProps,\n  type MainMenuCallbacks,\n  type MainMenuExtraCallbacks,\n  type MainMenuEvent,\n} from './MainMenu';\nimport PreferencesContext from './Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = ({\n  ipcEvent,\n  callback,\n  shouldApply,\n}: {\n  ipcEvent: MainMenuEvent,\n  callback: Function,\n  shouldApply: boolean,\n}) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer || !shouldApply) return;\n\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, callback, shouldApply]\n  );\n};\n\nconst useAppEventListener = ({\n  event,\n  callback,\n}: {\n  event: string,\n  callback: Function,\n}) => {\n  React.useEffect(\n    () => {\n      if (!app) return;\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      app.on(event, handler);\n      return () => app.removeListener(event, handler);\n    },\n    [event, callback]\n  );\n};\n\nconst isMainWindow = (windowTitle: string): boolean => {\n  if (!windowTitle) return false;\n  const lowercaseTitle = windowTitle.toLowerCase();\n  return (\n    lowercaseTitle.startsWith('gdevelop') &&\n    lowercaseTitle !== 'gdevelop dialogue tree editor (yarn)' &&\n    lowercaseTitle !== 'gdevelop sound effects editor (jfxr)' &&\n    lowercaseTitle !== 'gdevelop image editor (piskel)'\n  );\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = ({\n  props,\n  callbacks,\n  extraCallbacks,\n}: {|\n  props: BuildMainMenuProps,\n  callbacks: MainMenuCallbacks,\n  extraCallbacks: MainMenuExtraCallbacks,\n|}) => {\n  const { i18n, project, recentProjectFiles, shortcutMap } = props;\n  const { onClosePreview } = extraCallbacks;\n  const language = i18n.language;\n  const [\n    isFocusedOnMainWindow,\n    setIsFocusedOnMainWindow,\n  ] = React.useState<boolean>(true);\n  const [focusedWindowId, setFocusedWindowId] = React.useState<number>(\n    remote.getCurrentWindow().id\n  );\n  const closePreviewWindow =\n    !isFocusedOnMainWindow && onClosePreview\n      ? () => onClosePreview(focusedWindowId)\n      : null;\n  const {\n    values: { useShortcutToClosePreviewWindow },\n  } = React.useContext(PreferencesContext);\n\n  useAppEventListener({\n    event: 'browser-window-focus',\n    callback: window => {\n      setFocusedWindowId(window.id);\n      setIsFocusedOnMainWindow(isMainWindow(window.title));\n    },\n  });\n  useAppEventListener({\n    event: 'browser-window-blur',\n    callback: window => {\n      setIsFocusedOnMainWindow(!isMainWindow(window.title));\n    },\n  });\n\n  // We could use a for loop, but for safety let's write every hook one by\n  // one to avoid any change at runtime which would break the rules of hooks.\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open',\n    callback: callbacks.onChooseProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-recent',\n    callback: callbacks.onOpenRecentFile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save',\n    callback: callbacks.onSaveProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save-as',\n    callback: callbacks.onSaveProjectAs,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close',\n    callback:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? closePreviewWindow\n        : callbacks.onCloseProject,\n    shouldApply:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? true\n        : isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close-app',\n    callback: callbacks.onCloseApp,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-export',\n    callback: callbacks.onExportProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-template',\n    callback: callbacks.onCreateProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-blank',\n    callback: callbacks.onCreateBlank,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-project-manager',\n    callback: callbacks.onOpenProjectManager,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-home-page',\n    callback: callbacks.onOpenHomePage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-debugger',\n    callback: callbacks.onOpenDebugger,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-about',\n    callback: callbacks.onOpenAbout,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-preferences',\n    callback: callbacks.onOpenPreferences,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-language',\n    callback: callbacks.onOpenLanguage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-profile',\n    callback: callbacks.onOpenProfile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-games-dashboard',\n    callback: callbacks.onOpenGamesDashboard,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'update-status',\n    callback: callbacks.setElectronUpdateStatus,\n    shouldApply: true, // Keep logic around app update even if on preview window\n  });\n\n  React.useEffect(\n    () => {\n      if (ipcRenderer) {\n        ipcRenderer.send(\n          'set-main-menu',\n          buildMainMenuDeclarativeTemplate({\n            project,\n            i18n,\n            recentProjectFiles,\n            shortcutMap,\n            isApplicationTopLevelMenu: true,\n          })\n        );\n      }\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  const { onOpenRecentFile } = callbacks;\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeObjectCode: (\n      objectCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(objectCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'SpeXEngine 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName || 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n\n  static chooseCustomObjectFile = (objectName?: string): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an object of the project',\n        filters: [\n          {\n            name: 'SpeXEngine 5 object configuration',\n            extensions: ['gdo'],\n          },\n        ],\n        defaultPath: objectName || 'Object',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeCustomObject = (\n    customObject: gdObject,\n    filepath: string\n  ): Promise<void> => {\n    const exportedObject = customObject.clone().get();\n    exportedObject.setTags('');\n    exportedObject.getVariables().clear();\n    exportedObject.getEffects().clear();\n    exportedObject\n      .getAllBehaviorNames()\n      .toJSArray()\n      .forEach(name => exportedObject.removeBehavior(name));\n    const serializedObject = serializeToJSObject(exportedObject);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the object:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'SpeXEngine 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your SpeXEngine 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'SpeXEngine 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const getAutoSaveCreationDate = async (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<?number> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n    if (!compareLastModified) {\n      return autoSavedTime;\n    }\n    try {\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      // When comparing the last modified time, add a 5 seconds margin to avoid\n      // showing the warning if the user has just saved the project, or if the\n      // project has been decompressed from a zip file, causing the last modified\n      // time to be the time of decompression.\n      return autoSavedTime > saveTime + 5000 ? autoSavedTime : null;\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return null;\n    }\n  }\n  return null;\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\n\nimport {\n  applyResourceDefaults,\n  getLocalResourceFullPath,\n  getResourceFilePathStatus,\n} from '../../ResourcesList/ResourceUtils';\nimport { mapVector } from '../../Utils/MapFor';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport optionalLazyRequire from '../../Utils/OptionalLazyRequire';\nimport optionalRequire from '../../Utils/OptionalRequire';\n\nconst gd: libGDevelop = global.gd;\n\nconst lazyRequireGlob = optionalLazyRequire('glob');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\n\nexport const locateResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n\n  electron.shell.showItemInFolder(path.resolve(resourceFilePath));\n};\n\nexport const openResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  electron.shell.openPath(path.resolve(resourceFilePath));\n};\n\nexport const copyResourceFilePath = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  electron.clipboard.writeText(path.resolve(resourceFilePath));\n};\n\nexport const scanForNewResources = async ({\n  project,\n  extensions,\n  createResource,\n}: {|\n  project: gdProject,\n  extensions: Array<string>,\n  createResource: () => gdResource,\n|}) => {\n  const glob = lazyRequireGlob();\n  if (!glob) return;\n\n  const resourcesManager = project.getResourcesManager();\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const allExtensions = [\n    ...extensions,\n    ...extensions.map(extension => extension.toUpperCase()),\n  ];\n\n  try {\n    const allFiles = await new Promise((resolve, reject) => {\n      glob(\n        projectPath + '/**/*.{' + allExtensions.join(',') + '}',\n        (error, files) => {\n          if (error) reject(error);\n          else resolve(files);\n        }\n      );\n    });\n\n    const filesToCheck = new gd.VectorString();\n    allFiles.forEach(filePath =>\n      filesToCheck.push_back(path.relative(projectPath, filePath))\n    );\n    const filePathsNotInResources = project\n      .getResourcesManager()\n      .findFilesNotInResources(filesToCheck);\n    filesToCheck.delete();\n\n    mapVector(filePathsNotInResources, (relativeFilePath: string) => {\n      const resourceName = newNameGenerator(relativeFilePath, name =>\n        resourcesManager.hasResource(name)\n      );\n\n      const resource = createResource();\n      resource.setFile(relativeFilePath);\n      resource.setName(resourceName);\n      applyResourceDefaults(project, resource);\n      resourcesManager.addResource(resource);\n      resource.delete();\n\n      console.info(\n        `\"${relativeFilePath}\" added to project as resource named \"${resourceName}\".`\n      );\n    });\n  } catch (error) {\n    console.error(`Error finding files inside ${projectPath}:`, error);\n    return;\n  }\n};\n\nexport const removeAllResourcesWithInvalidPath = ({\n  project,\n}: {|\n  project: gdProject,\n|}) => {\n  const resourcesManager = project.getResourcesManager();\n  const removedResourceNames = resourcesManager\n    .getAllResourceNames()\n    .toJSArray()\n    .filter(resourceName => {\n      return getResourceFilePathStatus(project, resourceName) === 'error';\n    });\n\n  removedResourceNames.forEach(resourceName => {\n    resourcesManager.removeResource(resourceName);\n    console.info('Removed due to invalid path: ' + resourceName);\n  });\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans, t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  getAutoSaveCreationDate,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n  onRenderNewProjectSaveAsLocationChooser,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\nimport {\n  copyResourceFilePath,\n  locateResourceFile,\n  openResourceFile,\n  removeAllResourcesWithInvalidPath,\n  scanForNewResources,\n} from './LocalProjectResourcesHandler';\nimport { allResourceKindsAndMetadata } from '../../ResourcesList/ResourceSource';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  onRenderNewProjectSaveAsLocationChooser: onRenderNewProjectSaveAsLocationChooser,\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    getAutoSaveCreationDate,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with SpeXEngine and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n  }),\n  createResourceOperations: () => ({\n    project,\n    resource,\n    i18n,\n    updateInterface,\n    cleanUserSelectionOfResources,\n    informUser,\n  }) => [\n    {\n      label: i18n._(t`Locate file`),\n      click: () => locateResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Open file`),\n      click: () => openResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Copy file path`),\n      click: () => {\n        copyResourceFilePath({ project, resource });\n        informUser({\n          message: <Trans>Resource file path copied to clipboard</Trans>,\n        });\n      },\n    },\n    { type: 'separator' },\n    {\n      label: i18n._(t`Scan in the project folder for...`),\n      submenu: allResourceKindsAndMetadata.map(\n        ({ displayName, fileExtensions, createNewResource }) => ({\n          label: i18n._(displayName),\n          click: async () => {\n            await scanForNewResources({\n              project,\n              extensions: fileExtensions,\n              createResource: createNewResource,\n            });\n            updateInterface();\n          },\n        })\n      ),\n    },\n    {\n      label: i18n._(t`Remove resources with invalid path`),\n      click: () => {\n        removeAllResourcesWithInvalidPath({ project });\n        // Remove user selection in case the user selected a resource\n        // that was just removed.\n        cleanUserSelectionOfResources();\n        // Force update of the resources list as otherwise it could render\n        // resources that were just deleted.\n        updateInterface();\n      },\n    },\n  ],\n}: StorageProvider);\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nimport {\n  extractFilenameWithExtensionFromProductAuthorizedUrl,\n  isProductAuthorizedResourceUrl,\n} from '../../Utils/GDevelopServices/Shop';\nimport {\n  extractFilenameWithExtensionFromPublicAssetResourceUrl,\n  isPublicAssetResourceUrl,\n} from '../../Utils/GDevelopServices/Asset';\nimport {\n  isBlobURL,\n  isURL,\n  parseLocalFilePathOrExtensionFromMetadata,\n} from '../../ResourcesList/ResourceUtils';\nimport { sanitizeFilename } from '../../Utils/Filename';\nimport { extractFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nimport axios from 'axios';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n|};\n\nconst generateUnusedFilepath = (\n  basePath: string,\n  alreadyUsedFilePaths: Set<string>,\n  filename: string\n) => {\n  const extension = path.extname(filename);\n  const filenameWithoutExtension = path.basename(filename, extension);\n  const name = newNameGenerator(filenameWithoutExtension, name => {\n    const tentativePath = path.join(basePath, name) + extension;\n    return (\n      fs.existsSync(tentativePath) || alreadyUsedFilePaths.has(tentativePath)\n    );\n  });\n  return path.join(basePath, name) + extension;\n};\n\nconst downloadBlobToLocalFile = async (\n  blobUrl: string,\n  filePath: string\n): Promise<void> => {\n  if (!ipcRenderer) throw new Error('Not supported');\n\n  const response = await axios.get(blobUrl, {\n    responseType: 'arraybuffer',\n  });\n  const arrayBuffer = response.data;\n\n  await ipcRenderer.invoke(\n    'local-file-save-from-arraybuffer',\n    arrayBuffer,\n    filePath\n  );\n};\n\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourceToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isURL(resource.getFile());\n  });\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourceToFetchNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      if (isBlobURL(url)) {\n        try {\n          const {\n            localFilePath,\n            extension,\n          } = parseLocalFilePathOrExtensionFromMetadata(resource);\n          const downloadedFilePath = localFilePath\n            ? path.resolve(projectPath, localFilePath)\n            : generateUnusedFilepath(\n                baseAssetsPath,\n                downloadedFilePaths,\n                sanitizeFilename(resource.getName() + (extension || ''))\n              );\n\n          await fs.ensureDir(baseAssetsPath);\n          await downloadBlobToLocalFile(url, downloadedFilePath);\n          resource.setFile(\n            path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n          );\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      } else {\n        let filename;\n        if (isProductAuthorizedResourceUrl(url)) {\n          // Resource is a private asset.\n          filename = extractFilenameWithExtensionFromProductAuthorizedUrl(url);\n        } else if (isPublicAssetResourceUrl(url)) {\n          // Resource is a public asset.\n          filename = extractFilenameWithExtensionFromPublicAssetResourceUrl(\n            url\n          );\n        } else {\n          // Resource is a project resource or a generic url.\n          filename = extractFilenameFromProjectResourceUrl(url);\n        }\n\n        // Find a new file for the resource to download.\n        const downloadedFilePath = generateUnusedFilepath(\n          baseAssetsPath,\n          downloadedFilePaths,\n          filename\n        );\n        downloadedFilePaths.add(downloadedFilePath);\n\n        try {\n          await retryIfFailed({ times: 2 }, async () => {\n            await fs.ensureDir(baseAssetsPath);\n            await ipcRenderer.invoke(\n              'local-file-download',\n              url,\n              downloadedFilePath\n            );\n            resource.setFile(\n              path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n            );\n          });\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      }\n\n      onProgress(fetchedResourcesCount++, resourceToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\n\nexport const processByChunk = async <Item, MappedItem>(\n  array: Array<Item>,\n  {\n    transformItem,\n    isChunkTooBig,\n    processChunk,\n  }: {|\n    transformItem: Item => Promise<MappedItem>,\n    isChunkTooBig: (MappedItem[]) => boolean,\n    processChunk: (MappedItem[]) => Promise<void>,\n  |}\n): Promise<void> => {\n  let currentItemIndex = 0;\n  const nextChunk: Array<MappedItem> = [];\n\n  while (currentItemIndex < array.length) {\n    const mappedItem = await transformItem(array[currentItemIndex]);\n\n    if (!nextChunk.length) {\n      // Existing chunk is empty - let the new item be added to it.\n    } else {\n      if (!isChunkTooBig([...nextChunk, mappedItem])) {\n        // Item can be added to the existing chunk - let's add it.\n      } else {\n        // Item can't be added to the existing chunk - process the existing chunk\n        await processChunk(nextChunk);\n        nextChunk.length = 0;\n      }\n    }\n\n    nextChunk.push(mappedItem);\n    currentItemIndex++;\n  }\n\n  if (nextChunk.length) {\n    await processChunk(nextChunk);\n    nextChunk.length = 0;\n  }\n\n  return;\n};\n","// @flow\r\nimport optionalRequire from './OptionalRequire';\r\nconst path = optionalRequire('path');\r\nconst fs = optionalRequire('fs');\r\n\r\nconst readLocalFileToArrayBuffer = async (\r\n  filePath: string\r\n): Promise<ArrayBuffer> => {\r\n  const buffer: Buffer = await new Promise((resolve, reject) => {\r\n    fs.readFile(filePath, function(err, buffer) {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      resolve(buffer);\r\n    });\r\n  });\r\n\r\n  // See https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer:\r\n  // The slice and offset stuff is required because small Buffers (less than 4 kB by default, half the pool size)\r\n  // can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer.\r\n  const arrayBuffer = buffer.buffer.slice(\r\n    buffer.byteOffset,\r\n    buffer.byteOffset + buffer.byteLength\r\n  );\r\n  return arrayBuffer;\r\n};\r\n\r\n// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types.\r\nconst extensionToMimeType = {\r\n  // Common audio extensions:\r\n  aac: 'audio/aac',\r\n  wav: 'audio/wav',\r\n  mp3: 'audio/mp3',\r\n  ogg: 'audio/ogg',\r\n\r\n  // Common image extensions:\r\n  png: 'image/png',\r\n  jpg: 'image/jpeg',\r\n  jpeg: 'image/jpeg',\r\n  webp: 'image/webp',\r\n\r\n  // Common font extensions:\r\n  ttf: 'font/ttf',\r\n  otf: 'font/otf',\r\n\r\n  // Common video extensions:\r\n  mp4: 'video/mp4',\r\n  webm: 'video/webm',\r\n\r\n  // Other common extensions:\r\n  json: 'application/json',\r\n  xml: 'application/xml',\r\n  gz: 'application/gzip',\r\n  js: 'application/javascript',\r\n};\r\n\r\nexport const readLocalFileToFile = async (filePath: string): Promise<File> => {\r\n  const arrayBuffer = await readLocalFileToArrayBuffer(filePath);\r\n  const extensionWithoutLeadingDot = path.extname(filePath).replace(/^\\./, '');\r\n  return new File([arrayBuffer], path.basename(filePath), {\r\n    type:\r\n      extensionToMimeType[extensionWithoutLeadingDot] ||\r\n      'application/octet-stream',\r\n  });\r\n};\r\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport LocalFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { moveAllCloudProjectResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  getCredentialsForCloudProject,\n  uploadProjectResourceFiles,\n  type UploadedProjectResourceFiles,\n} from '../../Utils/GDevelopServices/Project';\nimport { processByChunk } from '../../Utils/ProcessByChunk';\nimport { readLocalFileToFile } from '../../Utils/LocalFileUploader';\nimport { isURL, isBlobURL } from '../../ResourcesList/ResourceUtils';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nconst moveNothing = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\ntype ResourceAndFile = {|\n  resource: gdResource,\n  file: File,\n|};\n\nexport const moveAllLocalResourcesToCloudResources = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  const resourcesManager = project.getResourcesManager();\n\n  /**\n   * Find the local resources that must be\n   * uploaded into the new project.\n   */\n  const getResourcesToUpload = (project: gdProject): Array<gdResource> => {\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?gdResource => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              // URL from a cloud project: this is unlikely and would not work\n              // (as the project is a local project). Still, ignore this.\n              return null;\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource to be downloaded.\n            return resource;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const allResourcesToUpload = getResourcesToUpload(project);\n\n  const projectPath = path.dirname(oldFileMetadata.fileIdentifier);\n\n  let alreadyDoneCount = 0;\n  // Read all files as Files.\n  await processByChunk(allResourcesToUpload, {\n    transformItem: async (resource): Promise<ResourceAndFile | null> => {\n      const resourceAbsolutePath = path.resolve(\n        projectPath,\n        resource.getFile()\n      );\n\n      try {\n        const file = await readLocalFileToFile(resourceAbsolutePath);\n        return {\n          resource,\n          file,\n        };\n      } catch (error) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            `Unable to open the file (${resourceAbsolutePath}).`\n          ),\n        });\n        return null;\n      }\n    },\n    isChunkTooBig: (resourceAndFilesChunk: Array<ResourceAndFile | null>) => {\n      if (resourceAndFilesChunk.length > 70) return true;\n\n      const allBufferSize = resourceAndFilesChunk\n        .filter(Boolean)\n        .reduce((size, { file }) => size + file.size, 0);\n\n      // Stop a chunk when more than 150MB are read to be uploaded. This is\n      // to avoid loading all resources in memory at once. This don't give an exact\n      // guarantee on the upper bound (a single file could be more than 150MB), but\n      // this limits the risks of running out of memory.\n      return allBufferSize > 150 * 1000 * 1000;\n    },\n    processChunk: async (\n      resourceAndFilesChunk: Array<ResourceAndFile | null>\n    ) => {\n      const resourceAndFilesToUpload: ResourceAndFile[] = resourceAndFilesChunk.filter(\n        Boolean\n      );\n\n      // Upload the files just read, for the new project.\n      await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n      const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n        authenticatedUser,\n        newCloudProjectId,\n        resourceAndFilesToUpload.map(({ file }) => file),\n        (count, total) => {\n          onProgress(alreadyDoneCount + count, allResourcesToUpload.length);\n        }\n      );\n      alreadyDoneCount += resourceAndFilesChunk.length;\n\n      // Update resources with the newly created URLs.\n      uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n        const resource = resourceAndFilesToUpload[index].resource;\n        if (error || !url) {\n          result.erroredResources.push({\n            resourceName: resource.getName(),\n            error: error || new Error('Unknown error during upload.'),\n          });\n          return;\n        }\n\n        resource.setFile(url);\n      });\n    },\n  });\n\n  return result;\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(\n      new gd.AbstractFileSystemJS(),\n      new LocalFileSystem()\n    );\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      // $FlowFixMe - fileSystem is a gdAbstractFileSystem, despite the assignIn.\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // When saving a Cloud project locally, all resources are downloaded (including\n  // the ones on SpeXEngine Cloud).\n  [`${CloudStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n\n  // Moving to SpeXEngine \"Cloud\" storage:\n\n  // From a local project to a Cloud project, all resources are uploaded.\n  [`${LocalFileStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllLocalResourcesToCloudResources,\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllCloudProjectResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on SpeXEngine Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\nimport { moveUrlResourcesToCloudFilesIfPrivate } from '../CloudStorageProvider/CloudResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The Cloud file storage provider fetches the resources that are\n  // private URLs by downloading them and reuploading them to the cloud.\n  [CloudStorageProvider.internalName]: moveUrlResourcesToCloudFilesIfPrivate,\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            LocalFileStorageProvider,\n            UrlStorageProvider,\n            CloudStorageProvider,\n          ]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            getStorageProviderResourceOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={(props, callbacks, extraCallbacks) => (\n                <ElectronMainMenu\n                  props={props}\n                  callbacks={callbacks}\n                  extraCallbacks={extraCallbacks}\n                />\n              )}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProviderResourceOperations={\n                getStorageProviderResourceOperations\n              }\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n"],"names":["findGDJS","require","optionalRequire","path","fs","module","exports","findJsExtensionModules","filterExamples","onFindGDJS","then","gdjsRoot","extensionsRoot","join","console","info","Promise","resolve","reject","readdir","error","extensionFolders","filteredExtensionFolders","filter","folder","indexOf","all","map","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","err","stats","isFile","modulePaths","modulePath","loadExtension","gd","objectsEditorService","objectsRenderingService","loadAllExtensions","_","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","ex","result","message","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","copyAllEmbeddedResourcesToProjectFolder","project","filesWithEmbeddedResources","projectPath","dirname","getProjectFile","copies","values","hasAnyEmbeddedResourceOutsideProjectFolder","embeddedResources","embedded","isOutsideProjectFolder","resourceBasename","basename","fullPath","fileExtension","extname","fileNameWithoutExtension","newFileNameWithoutExtension","newNameGenerator","tentativeFileName","tentativePath","existsSync","resourceNewPath","resourceName","push","promises","copyFile","createAndMapEmbeddedResources","filesWithMappedResources","Map","filePath","mapping","resourceKind","relPath","relative","theEmbeddedResource","createNewResource","setName","setFile","getResourcesManager","addResource","set","listTileMapEmbeddedResources","readFile","data","tileMap","JSON","parse","__header__","app","dir","defs","tilesets","tileset","isPathInProjectFolder","resource","levels","level","bgRelPath","embeddedResourcesParsers","tilemap","json","remote","dialog","ResourceStoreChooser","options","onChooseResources","ResourceStore","onChoose","chosenResourceUrl","url","newResource","setOrigin","localResourceSources","allResourceKindsAndMetadata","kind","fileExtensions","displayName","selectLocalFileResources","i18n","getLastUsedPath","setLastUsedPath","Error","properties","multiSelection","latestPath","browserWindow","getCurrentWindow","showOpenDialog","title","filters","name","extensions","defaultPath","filePaths","length","lastUsedPath","hasFilesOutsideProjectFolder","some","parseEmbeddedResources","newToOldFilePaths","Window","showConfirmDialog","copyAllToProjectFolder","filePathWithMapping","has","mappedResources","setMetadata","stringify","embeddedResourcesMapping","displayTab","onlyForStorageProvider","selectResourcesHeadless","renderComponent","props","justifyContent","RaisedButton","primary","label","Trans","onClick","fileMetadata","getStorageProvider","resources","FileToCloudProjectResourceUploader","automaticallyOpenInput","automaticallyOpenIfPossible","electron","ipcRenderer","openAndWaitForExternalEditorWindow","editorName","externalEditorInput","invoke","externalEditorOutput","downloadAndPrepareExternalEditorBase64Resources","resourceNames","urlsToDownload","filesToRead","resourcesManager","forEach","hasResource","getResource","getFile","isURL","isBlobURL","localFilePath","downloadUrlsToBlobs","urlContainers","onProgress","count","total","downloadedBlobs","resourcesToDataUrl","blob","item","convertBlobToDataURL","dataUrl","content","toString","resourceData","editWithLocalExternalEditor","externalEditorName","defaultName","metadataKey","resourceManagementProps","singleFrame","extraOptions","externalEditorData","readMetadata","existingMetadata","fps","isLooping","sendExternalEditorOpened","saveBlobUrlsFromExternalEditorBase64Resources","baseNameForNewResources","modifiedResources","onFetchNewlyAddedResources","freeBlobsAndUpdateMetadata","metadata","patchExternalEditorMetadataWithResourcesNamesIfNecessary","getName","originalIndex","newName","newMetadata","editors","createDisplayName","editDisplayName","edit","os","getUID","userInfo","uid","e","global","pathPosix","posix","LocalFileSystem","_filesToDownload","getAllUrlFilesIn","pathPrefix","normalizedPathPrefix","normalize","replace","Object","keys","mkDir","mkdirsSync","dirExists","clearDir","emptyDirSync","getTempDir","tmpdir","fileNameFrom","_downloadUrlsToLocalFiles","dirNameFrom","makeAbsolute","filename","baseDirectory","isAbsolute","makeRelative","charAt","source","dest","copySync","writeToFile","file","contents","outputFileSync","readFileSync","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","normalizedFilePath","statSync","this","downloadUrlsToLocalFiles","qrCodeGenerator","QrCreator","render","config","$element","self","vendor_qrcode","createQRCode","text","version","quiet","qr","vqr","qrModuleCount","quietModuleCount","isDark","row","col","drawModuleRoundedDark","ctx","l","t","r","b","rad","nw","ne","se","sw","lal","x0","y0","x1","y1","r0","r1","drawModuleRoundendLight","mlla","x","y","setFill","drawOnCanvas","canvas","settings","a","ecLevel","minVersion","maxVersion","Math","d","context","background","fillStyle","fillRect","left","top","size","moduleCount","moduleSize","beginPath","right","bottom","rowT","rowB","colL","colR","radius","center","northwest","north","northeast","east","southeast","south","southwest","west","fill","type","colorStops","absolutePosition","coordinate","gradient","offset","color","defaults","HTMLCanvasElement","$canvas","document","qrcode","typeNumber","errorCorrectLevel","setupPositionProbePattern","_moduleCount","c","_modules","makeImpl","test","maskPattern","modules","Array","pos","QRUtil","i","j","bits","_errorCorrectLevel","mod","_dataCache","rsBlocks","QRRSBlock","buffer","qrBitBuffer","_buffer","_length","_this","B","_this.getBuffer","_this.getAt","index","put","_this.put","num","f","_this.getLengthInBits","m","_this.putBit","bit","bufIndex","_dataList","MODE_8BIT_BYTE","totalDataCount","PAD0","PAD1","maxEcCount","maxDcCount","dcdata","dcCount","dataCount","ecCount","totalCount","getBuffer","rsPoly","modPoly","qrPolynomial","ecdata","modIndex","totalCodeCount","g","inc","bitIndex","byteIndex","maskFunc","dark","QRErrorCorrectLevel","u","_this.addData","newData","qr8BitByte","_bytes","S","_this.getMode","_this.getLength","write","_this.write","_this.isDark","h","_this.getModuleCount","J","_this.make","minLostPoint","pattern","lostPoint","shift","_num","multiply","_this.multiply","QRMath","_this.mod","ratio","qrcode.stringToBytes","s","utf8","charcode","charCodeAt","L","M","Q","H","getBCHDigit","digit","PATTERN_POSITION_TABLE","w","_this.getBCHTypeInfo","G15","G15_MASK","A","_this.getBCHTypeNumber","G18","G","_this.getPatternPosition","F","_this.getMaskFunction","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","C","_this.getErrorCorrectPolynomial","errorCorrectLength","mode","D","_this.getLostPoint","sameCount","darkCount","EXP_TABLE","LOG_TABLE","_this.glog","n","_this.gexp","getRsBlockTable","RS_BLOCK_TABLE","I","_this.getRSBlocks","rsBlock","list","gdevelopTheme","React","GDevelopThemeContext","containerRef","containerElement","current","palette","secondary","firstChild","removeChild","ref","open","onExport","onClose","onRunPreviewLocally","urlWithProtocol","Dialog","actions","FlatButton","secondaryActions","onRequestClose","maxWidth","Text","PlaceholderLoader","ShareLink","debuggerServerState","debuggerServerAddress","callbacksList","debuggerIds","localPreviewDebuggerServer","startServer","serverStartPromise","serverStartPromiseCompleted","removeAllListeners","on","event","onErrorReceived","id","debuggerIdIndex","splice","onConnectionClosed","onConnectionOpened","errorMessage","onConnectionErrored","address","onServerStateChanged","parsedMessage","onHandleParsedMessage","warn","send","serverStartTimeoutPromise","setTimeout","race","sendMessage","getServerState","getExistingDebuggerIds","registerCallbacks","callbacks","callbacksIndex","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","previewGameIndexHtmlPath","closePreview","windowId","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","serverParams","port","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","localFileSystem","fileSystem","assignIn","AbstractFileSystemJS","outputDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","catch","fn","onResult","t0","performance","now","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","fallbackAuthor","setFallbackAuthor","username","exportProjectForPixiPreview","delete","debuggerId","command","checkUserHasSubscription","time","SubscriptionChecker","subscriptionChecker","onChangeSubscription","shell","localCordovaExportPipeline","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","LocalFolderPicker","value","onChange","setLastCompilationDirectory","fullWidth","renderLaunchButtonLabel","prepareExporter","launchExport","exportOptions","ExportOptions","setTarget","exportWholePixiProject","urlFiles","launchResourcesDownload","updateStepProgress","throwIfAnyError","launchCompression","exportOutput","renderDoneFooter","openExportFolder","openPath","renderGameButton","localElectronExportPipeline","localHTML5ExportPipeline","styles","container","position","display","alignItems","button","marginLeft","textField","flex","onChooseFolder","showSaveDialog","style","undefined","TextField","margin","translatableHintText","lazyRequireArchiver","optionalLazyRequire","archiveLocalFolder","outputFilename","sizeLimit","archiver","createWriteStream","archive","zlib","fileSize","pointer","log","roundFileSizeInMb","round","pipe","directory","finalize","localFacebookInstantGamesExportPipeline","archiveOutputFilename","getPath","temporaryOutputDir","uploadLocalFile","uploadOptions","stepCurrentProgress","stepMaxProgress","localOnlineCordovaExportPipeline","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","launchUpload","outputFile","getBuildFileUploadOptions","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","localOnlineElectronExportPipeline","buildElectron","localOnlineWebExportPipeline","renderCustomStepsProgress","build","onSaveProject","buildWeb","localOnlineWebExporter","onlineWebExporter","exportPipeline","localAutomatedExporters","html5Exporter","onlineCordovaExporter","onlineElectronExporter","facebookInstantGamesExporter","localManualExporters","cordovaExporter","electronExporter","useIPCEventListener","ipcEvent","callback","shouldApply","handler","eventArgs","removeListener","useAppEventListener","isMainWindow","windowTitle","lowercaseTitle","toLowerCase","startsWith","extraCallbacks","recentProjectFiles","shortcutMap","onClosePreview","language","isFocusedOnMainWindow","setIsFocusedOnMainWindow","focusedWindowId","setFocusedWindowId","closePreviewWindow","useShortcutToClosePreviewWindow","PreferencesContext","window","onChooseProject","onOpenRecentFile","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setElectronUpdateStatus","buildMainMenuDeclarativeTemplate","isApplicationTopLevelMenu","useCommandWithOptions","generateOptions","fileIdentifier","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeFile","writeBehaviorCode","behaviorCodeNamespace","writeObjectCode","objectCodeNamespace","writeJSONFile","object","filepath","ensureDir","stringifyException","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","extension","serializedObject","serializeToJSObject","chooseCustomObjectFile","objectName","writeCustomObject","customObject","exportedObject","clone","setTags","getVariables","clear","getEffects","getAllBehaviorNames","toJSArray","removeBehavior","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","encoding","dataObject","readJSONFile","onOpenWithPicker","onOpen","unsplit","getReferencePartialObject","referencePath","isReferenceMagicPropertyName","maxUnsplitDepth","getAutoSaveCreationDate","compareLastModified","autoSavePath","autoSavedTime","mtime","getTime","saveTime","onGetAutoSave","SvgIcon","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","lazyRequireGlob","scanForNewResources","createResource","glob","allExtensions","files","allFiles","filesToCheck","filePathsNotInResources","findFilesNotInResources","mapVector","relativeFilePath","applyResourceDefaults","internalName","renderIcon","Computer","fontSize","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","onRenderNewProjectSaveAsLocationChooser","createOperations","onChooseSaveProjectAsLocation","onAutoSaveProject","getOpenErrorMessage","getWriteErrorMessage","createResourceOperations","updateInterface","cleanUserSelectionOfResources","informUser","click","resourceFilePath","getLocalResourceFullPath","showItemInFolder","locateResourceFile","openResourceFile","clipboard","writeText","copyResourceFilePath","submenu","getAllResourceNames","getResourceFilePathStatus","removeResource","removeAllResourcesWithInvalidPath","LocalGDJSDevelopmentWatcher","shouldWatch","useGDJSDevelopmentWatcher","generateUnusedFilepath","basePath","alreadyUsedFilePaths","filenameWithoutExtension","downloadBlobToLocalFile","blobUrl","axios","responseType","response","arrayBuffer","moveUrlResourcesToLocalFiles","allResourceNames","resourceToFetchNames","baseAssetsPath","downloadedFilePaths","Set","erroredResources","fetchedResourcesCount","PromisePool","for","process","parseLocalFilePathOrExtensionFromMetadata","downloadedFilePath","sanitizeFilename","isProductAuthorizedResourceUrl","extractFilenameWithExtensionFromProductAuthorizedUrl","isPublicAssetResourceUrl","extractFilenameWithExtensionFromPublicAssetResourceUrl","extractFilenameFromProjectResourceUrl","add","retryIfFailed","times","processByChunk","array","transformItem","isChunkTooBig","processChunk","currentItemIndex","nextChunk","mappedItem","readLocalFileToArrayBuffer","slice","byteOffset","byteLength","extensionToMimeType","aac","wav","mp3","ogg","png","jpg","jpeg","webp","ttf","otf","mp4","webm","xml","gz","js","readLocalFileToFile","extensionWithoutLeadingDot","File","moveNothing","moveAllLocalResourcesToCloudResources","oldFileMetadata","newFileMetadata","newCloudProjectId","allResourcesToUpload","resourceFile","checkIfIsGDevelopCloudBucketUrl","Boolean","getResourcesToUpload","alreadyDoneCount","resourceAbsolutePath","resourceAndFilesChunk","reduce","resourceAndFilesToUpload","getCredentialsForCloudProject","uploadProjectResourceFiles","uploadedProjectResourceFiles","movers","LocalFileStorageProvider","ProjectResourcesCopier","copyAllResourcesTo","CloudStorageProvider","UrlStorageProvider","moveAllCloudProjectResourcesToCloudProject","LocalResourceMover","moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","fetchers","moveUrlResourcesToCloudFilesIfPrivate","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","storageProvider","fetcher","create","authentication","setUpContextMenu","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","ProjectStorageProviders","storageProviders","defaultStorageProvider","getStorageProviderOperations","getStorageProviderResourceOperations","initialFileMetadataToOpen","MainFrame","renderMainMenu","renderPreviewLauncher","renderExportDialog","ExportDialog","automatedExporters","manualExporters","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService"],"sourceRoot":""}